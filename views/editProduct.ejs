<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - User Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style_admin.css">
</head>
<body>

    
        <!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="#">Admin Panel</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav ms-auto">
        <li class="nav-item"><a class="nav-link" href="#">Account</a></li>
        <li class="nav-item"><a class="nav-link" href="#">Logout</a></li>
      </ul>
    </div>
</nav>

<!-- Sidebar + Main Content -->
<div class="d-flex">
    <nav class="bg-dark text-white p-3" id="sidebar">
      <ul class="nav flex-column">
        <li class="nav-item"><a class="nav-link text-white" href="/admin/dashboard/sales">Dashboard</a></li>
        <li class="nav-item"><a class="nav-link text-white" href="/admin/users">User Management</a></li>
        <li class="nav-item"><a class="nav-link text-white" href="/admin/category">Category Management</a></li>
        <li class="nav-item"><a class="nav-link text-white" href="/admin/products">Product Management</a></li>
        <li class="nav-item"><a class="nav-link text-white" href="/admin/offer">Offer Management</a></li>
        <li class="nav-item"><a class="nav-link text-white" href="/admin/coupons">Coupon Management</a></li>
        <li class="nav-item"><a class="nav-link text-white" href="/admin/ordermanage">Order Management</a></li>
      </ul>
    </nav>
    <div class="container mt-4">
        <h2 class="text-center">Edit Product Details</h2>
    
        <form action="/admin/update/<%= product._id %>" method="POST" enctype="multipart/form-data" id="updateForm">
            <label>Product Name</label>
            <input type="text" name="productName" class="form-control" value="<%= product.productName %>" required>
    
            <label>Description</label>
            <textarea name="description" class="form-control" required><%= product.description %></textarea>
    
            <label>Category</label>
            <select name="category_id" class="form-control" required>
                <% categories.forEach(category => { %>
                    <option value="<%= category._id.toString() %>" <%= category._id.toString() === product.category._id.toString() ? 'selected' : '' %>>
                        <%= category.name %>
                    </option>
                <% }) %>
            </select>
    
            <label>Price (â‚¹ INR)</label>
            <input type="number" name="price" class="form-control" value="<%= product.price %>" required>
    
            <label>Existing Images</label>
<div id="existing-images" class="d-flex flex-wrap">
    <% if (product.imageUrls && product.imageUrls.length > 0) { %>
        <% product.imageUrls.forEach((img, index) => { %>
            <div class="image-container position-relative m-2">
                <img src="<%= '/uploads/' + img.replace(/^uploads[\\/]/, '').replace(/\\/g, '/').replace(/ /g, '%20') %>" 
                     alt="<%= product.productName %>" 
                     style="width: 100px; margin: 5px;"
                     data-img-src="<%= img %>">
                <button type="button" class="btn btn-danger btn-sm position-absolute remove-existing-img"
                        data-img-src="<%= img %>"
                        style="top: 5px; right: 5px;">X</button>
            </div>
        <% }) %>
    <% } else { %>
        <p>No images available</p>
    <% } %>
</div>
            
    
            <label>Upload New Images</label>
            <input type="file" id="imageInput" name="imageUrls" multiple accept="image/*">

            <div id="preview"></div>  <!-- Cropped Image Preview -->
            <button type="button" id="cropImage" class="btn btn-secondary mt-2">Crop Image</button>
    
            <!-- Hidden input for cropped images -->
            <input type="hidden" name="croppedImages" id="croppedImages">
    
            <button type="submit" class="btn btn-primary mt-3">Update Product</button>
        </form>
    </div>
    
    <!-- CropperJS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
       let cropper;
let croppedImages = [];
let removedImages = [];
let currentImageElement = null;

function displayCropper(imageSrc, file = null, imgElement = null) {
    const image = document.createElement("img");
    image.src = imageSrc;
    image.id = "cropperImage";
    image.style.maxWidth = "100%";

    document.getElementById("preview").innerHTML = "";
    document.getElementById("preview").appendChild(image);

    if (cropper) cropper.destroy();
    cropper = new Cropper(image, {
        aspectRatio: 560 / 748,
        viewMode: 2,
        autoCropArea: 1
    });

    if (file) {
        const newContainer = document.createElement("div");
        newContainer.classList.add("image-container", "m-2", "position-relative");

        const newImg = document.createElement("img");
        newImg.src = imageSrc;
        newImg.style.width = "100px";
        newImg.style.cursor = "pointer";
        newImg.classList.add("croppable-image");

        const removeBtn = document.createElement("button");
        removeBtn.innerText = "X";
        removeBtn.classList.add("btn", "btn-danger", "btn-sm", "position-absolute");
        removeBtn.style.top = "5px";
        removeBtn.style.right = "5px";

        removeBtn.addEventListener("click", function () {
            newContainer.remove();
            croppedImages = croppedImages.filter(img => img !== newImg.src);
            document.getElementById("croppedImages").value = JSON.stringify(croppedImages);
            document.getElementById("imageInput").value = "";
        });

        newContainer.appendChild(newImg);
        newContainer.appendChild(removeBtn);
        document.getElementById("existing-images").appendChild(newContainer);

        currentImageElement = newImg;

        newImg.addEventListener("click", function () {
            displayCropper(this.src, null, this);
        });
    } else {
        currentImageElement = imgElement;
    }
}

// Remove existing images
document.querySelectorAll(".remove-existing-img").forEach((button) => {
    button.addEventListener("click", function () {
        const imgSrc = this.getAttribute("data-img-src");
        if (imgSrc) {
            removedImages.push(imgSrc);
        }
        this.parentElement.remove();
    });
});

// Event listener for new image selection
document.getElementById("imageInput").addEventListener("change", function (event) {
    const files = event.target.files;
    if (!files.length) return;

    for (const file of files) {
        const reader = new FileReader();
        reader.onload = function (e) {
            displayCropper(e.target.result, file);
        };
        reader.readAsDataURL(file);
    }
});

// Event listener for cropping action
document.getElementById("cropImage").addEventListener("click", function () {
    if (!cropper || !currentImageElement) return;

    const canvas = cropper.getCroppedCanvas();
    if (canvas) {
        const croppedData = canvas.toDataURL("image/png");
        currentImageElement.src = croppedData;
        croppedImages.push(croppedData);
        document.getElementById("croppedImages").value = JSON.stringify(croppedImages);
        cropper.destroy();
        cropper = null;
        currentImageElement = null;
    }
});

// Form submission with AJAX
document.getElementById("updateForm").addEventListener("submit", function (event) {
    event.preventDefault();
    const formData = new FormData(this);
    const productId = "<%= product._id %>";

    formData.append("removedImages", JSON.stringify(removedImages));

    // Append existing images that are not removed
    document.querySelectorAll("#existing-images img").forEach((img) => {
        const imgSrc = img.getAttribute("data-img-src");
        if (imgSrc && !removedImages.includes(imgSrc)) {
            formData.append("existingImages[]", imgSrc);
        }
    });

    let imageProcessingCount = croppedImages.length;
    if (imageProcessingCount === 0) {
        sendUpdateRequest(formData, productId);
    } else {
        croppedImages.forEach((base64Data, index) => {
            const croppedCanvas = cropper.getCroppedCanvas();
if (croppedCanvas) {
    croppedCanvas.toBlob(blob => {
        formData.append("croppedImages[]", blob, `cropped_${index}.png`);
        imageProcessingCount--;
        if (imageProcessingCount === 0) {
            sendUpdateRequest(formData, productId);
        }
    }, "image/png");
}
        });
    }
});

// Function to send FormData via fetch
function sendUpdateRequest(formData, productId) {
    fetch(`/admin/update/${productId}`, {
        method: "POST",
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        console.log("Server Response:", data);
        if (data.message === "Internal Server Error") {
            alert("Server Error: " + data.error);
        } else {
            window.location.href = "/admin/products";
        }
    })
    .catch(error => {
        console.error("Error:", error);
        
    });
}

    </script>
    